description: Intel 8085
general:
  address_size: 16
  endian: little
  registers:
    - a
    - b
    - c
    - d
    - e
    - h
    - l
    - m
    - bc
    - de
    - hl
    - sp
    - psw
  origin: 0
  identifier:
    name: intel-8085-asm
    version: "0.1.0"
    extension: 8085-asm
  min_version: 0.2.5
operand_sets:
  8_bit_source:
    operand_values:
      b_reg:
        type: register
        register: b
        bytecode:
          value: 0
          size: 3
      c_reg:
        type: register
        register: c
        bytecode:
          value: 1
          size: 3
      d_reg:
        type: register
        register: d
        bytecode:
          value: 2
          size: 3
      e_reg:
        type: register
        register: e
        bytecode:
          value: 3
          size: 3
      h_reg:
        type: register
        register: h
        bytecode:
          value: 4
          size: 3
      l_reg:
        type: register
        register: l
        bytecode:
          value: 5
          size: 3
      m_reg:
        type: register
        register: m
        bytecode:
          value: 6
          size: 3
      m_reg_actual:
        type: indirect_register
        register: hl
        bytecode:
          value: 6
          size: 3
      a_reg:
        type: register
        register: a
        bytecode:
          value: 7
          size: 3
  register_pairs:
    operand_values:
      bc_pair:
        type: register
        register: bc
        bytecode:
          value: 0
          size: 2
      de_pair:
        type: register
        register: de
        bytecode:
          value: 1
          size: 2
      hl_pair:
        type: register
        register: hl
        bytecode:
          value: 2
          size: 2
      sp_pair:
        type: register
        register: sp
        bytecode:
          value: 3
          size: 2
  register_pairs_bc_de_only:
    operand_values:
      bc_pair:
        type: register
        register: bc
        bytecode:
          value: 0
          size: 2
      bc_pair_short:
        type: register
        register: b
        bytecode:
          value: 0
          size: 2
      de_pair:
        type: register
        register: de
        bytecode:
          value: 1
          size: 2
      de_pair_short:
        type: register
        register: d
        bytecode:
          value: 1
          size: 2
  uint16_no_bytecode:
    operand_values:
      uint16:
        type: numeric
        argument:
          size: 16
          byte_align: true
          endian: little
  uint8_no_bytecode:
    operand_values:
      uint16:
        type: numeric
        argument:
          size: 8
          byte_align: true
instructions:
  # General
  nop:
    # no operation
    byte_code:
      value: 0
      size: 8
  hlt:
    # halt
    byte_code:
      value: 0x76
      size: 8
  stc:
    # set Carry flag
    byte_code:
      value: 0x37
      size: 8
  cmc:
    # toggle carry flag (1's complement)
      value: 0x3F
      size: 8
  out:
    # place A on data bus and indicated port on address bus
    byte_code:
        value: 0xD3
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint8_no_bytecode
  in:
    # reads eight bits of data from the specified port and loads it into the accumulator.
    byte_code:
        value: 0xDB
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint8_no_bytecode

  # Undocumented Instructions
  arhl:
    # rotate HL right (undocumented)
    byte_code:
      value: 0x10
      size: 8
  dsub:
    # subtract BC from HL results in HL (undocumented)
    byte_code:
      value: 0x08
      size: 8
  rdel:
    # rotate DE left through Carry (undocumented)
    byte_code:
      value: 0x18
      size: 8
  ldhi:
    # DE = HL + 1 byte argument (undocumented)
    byte_code:
      value: 0x28
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint8_no_bytecode
  ldsi:
    # DE = SP + 1 byte argument (undocumented)
    byte_code:
      value: 0x38
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint8_no_bytecode
  shlx:
    # Store HL as per DE
    byte_code:
        value: 0xD9
        size: 8
  lhlx:
    # load HL as per DE
    byte_code:
        value: 0xED
        size: 8
  rstv:
    # restart on overflow
    # On overflow CALL 0040
    byte_code:
      value: 0xCB
      size: 8
  jk:
    # jump if K (X5) - undocumented underflow or overflow indicator
    byte_code:
        value: 0xFD
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  jnk:
    # jump if not K (X5) - undocumented underflow or overflow indicator
    byte_code:
        value: 0xDD
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode

  # Interupt Control
  rim:
    #
    byte_code:
      value: 0x20
      size: 8
  sim:
    # Set Interupt Mask
    byte_code:
      value: 0x30
      size: 8
  di:
    # disable interupts
    byte_code:
        value: 0xF3
        size: 8
  ei:
    # enable interupts
    byte_code:
        value: 0xFB
        size: 8

  # Data Transfer
  lxi:
    # load immediate 16-bit
    # Bit format 00xx0001, xx = register pair
    byte_code:
        value: 0
        size: 2
        suffix:
          value: 1
          size: 4
    operands:
      count: 1
      operand_sets:
        list:
          - register_pairs
  stax:
    # store A direct to memory address in register pair
    # Bit format 00xx0010, xx = register pair BC or DE
    byte_code:
      value: 0
      size: 2
      suffix:
        value: 2
        size: 4
    operands:
      count: 1
      operand_sets:
        list:
          - register_pairs_bc_de_only
  ldax:
    # load A direct from memory address in register pair
    # Bit format 00xx0010, xx = register pair BC or DE
    byte_code:
      value: 0
      size: 2
      suffix:
        value: 10
        size: 4
    operands:
      count: 1
      operand_sets:
        list:
          - register_pairs_bc_de_only
  shld:
    # store HL direct
    byte_code:
      value: 0x22
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  lhld:
    # load HL direct
    byte_code:
      value: 0x2A
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  sta:
    # store A direct
    byte_code:
      value: 0x32
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  lda:
    # load A direct
    byte_code:
      value: 0x3A
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  mvi:
    # move immediate
    # Bit format 00xxx110, xxx = register
    byte_code:
        value: 0
        size: 2
        suffix:
          value: 6
          size: 3
    operands:
      count: 2
      operand_sets:
        list:
          - 8_bit_source
          - uint8_no_bytecode
  mov:
    # move value from register to register
    byte_code:
        value: 1
        size: 2
    operands:
      count: 2
      operand_sets:
        list:
          - 8_bit_source
          - 8_bit_source
        disallowed_pairs:
          - [m_reg,m_reg]
          - [m_reg_actual,m_reg]
          - [m_reg,m_reg_actual]
          - [m_reg_actual,m_reg_actual]
  xthl:
    # exchange contentents of HL with memory pointed to by SP (stack pointer)
    byte_code:
        value: 0xE3
        size: 8
  xchg:
    # exchange FL with DE
    byte_code:
        value: 0xEB
        size: 8

  # Arithmetic and Logic
  add:
    # add source value to A register
    byte_code:
        value: 16
        size: 5
    operands:
      count: 1
      operand_sets:
        list:
          - 8_bit_source
  adc:
    # add source value and carry flag to A register
    byte_code:
        value: 17
        size: 5
    operands:
      count: 1
      operand_sets:
        list:
          - 8_bit_source
  adi:
    # add immediate value to A register
    byte_code:
        value: 0xC6
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint8_no_bytecode
  aci:
    # add with carry immediate value to A register
    byte_code:
        value: 0xCE
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint8_no_bytecode
  sub:
    # subtract source value from A register
    byte_code:
        value: 18
        size: 5
    operands:
      count: 1
      operand_sets:
        list:
          - 8_bit_source
  sbb:
    # subtract with borrow source value from A register
    byte_code:
        value: 19
        size: 5
    operands:
      count: 1
      operand_sets:
        list:
          - 8_bit_source
  sui:
    # subtract immediate value from A register
    byte_code:
        value: 0xD6
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint8_no_bytecode
  sbi:
    # subtract with borrow immediate value from A register
    byte_code:
        value: 0xDE
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint8_no_bytecode
  inx:
    # increment register pair
    # Bit format 00xx0011, xx = register pair
    byte_code:
        value: 0
        size: 2
        suffix:
          value: 3
          size: 4
    operands:
      count: 1
      operand_sets:
        list:
          - register_pairs
  dcx:
    # decrement register pair
    # Bit format 00xx1011, xx = register pair
    byte_code:
        value: 0
        size: 2
        suffix:
          value: 11
          size: 4
    operands:
      count: 1
      operand_sets:
        list:
          - register_pairs
  inr:
    # increment register
    # Bit format 00xxx100, xxx = register
    byte_code:
        value: 0
        size: 2
        suffix:
          value: 4
          size: 3
    operands:
      count: 1
      operand_sets:
        list:
          - 8_bit_source
  dcr:
    # decrement register
    # Bit format 00xxx101, xxx = register
    byte_code:
        value: 0
        size: 2
        suffix:
          value: 5
          size: 3
    operands:
      count: 1
      operand_sets:
        list:
          - 8_bit_source
  cma:
    # product 1's complement of A in A
    byte_code:
      value: 0x2F
      size: 8
  rlc:
    # rotate A left (B7 to B0 and Carry)
    byte_code:
      value: 0x07
      size: 8
  rrc:
    # rotate A right (B0 to B7 and Carry)
    byte_code:
      value: 0x0F
      size: 8
  ral:
    # rotate A left through carry (B7 to Carry, Carry to B0)
    byte_code:
      value: 0x17
      size: 8
  rar:
    # rotate A right through carry (B0 to Carry, Carry to B7)
    byte_code:
      value: 0x1F
      size: 8
  daa:
    # adjust A to binary coded decimal
    byte_code:
      value: 0x27
      size: 8
  dad:
    # add contents of register pair to HL
    # Bit format 00xx1001, xx = register pair
    byte_code:
        value: 0
        size: 2
        suffix:
          value: 9
          size: 4
    operands:
      count: 1
      operand_sets:
        list:
          - register_pairs
  ana:
    # AND source value to A register
    byte_code:
        value: 20
        size: 5
    operands:
      count: 1
      operand_sets:
        list:
          - 8_bit_source
  ani:
    # AND immediate value to A register
    byte_code:
        value: 0xE6
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint8_no_bytecode
  xra:
    # XOR source value to A register
    byte_code:
        value: 21
        size: 5
    operands:
      count: 1
      operand_sets:
        list:
          - 8_bit_source
  xri:
    # XOR immediate value to A register
    byte_code:
        value: 0xEE
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint8_no_bytecode
  ora:
    # OR source value to A register
    byte_code:
        value: 22
        size: 5
    operands:
      count: 1
      operand_sets:
        list:
          - 8_bit_source
  ori:
    # OR immediate value to A register
    byte_code:
        value: 0xF6
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint8_no_bytecode
  cmp:
    # Compare source value to A register
    # Zero flag indictes equality
    # Carry flag indicates source valye us greater than A
    byte_code:
        value: 23
        size: 5
    operands:
      count: 1
      operand_sets:
        list:
          - 8_bit_source
  cpi:
    # Compare immediate value to A register
    byte_code:
        value: 0xFE
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint8_no_bytecode

  # Program Flow Control
  jmp:
    # unconditional jump
    byte_code:
        value: 0xC3
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  jz:
    # jump if zero flag is set
    byte_code:
        value: 0xCA
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  jnz:
    # jump if zero flag not set
    byte_code:
        value: 0xC2
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  jc:
    # jump if carry flag is set
    byte_code:
        value: 0xDA
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  jnc:
    # jump if carry flag not set
    byte_code:
        value: 0xD2
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  jpe:
    # jump if parity is even (parity flag is one)
    byte_code:
        value: 0xEA
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  jpo:
    # jump if parity is odd (parity flag is zero)
    byte_code:
        value: 0xE2
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  jm:
    # jump if accumultor is minus (sign flag is one)
    byte_code:
        value: 0xFA
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  jp:
    # jump if accumultor is positive (sign flag is zero)
    byte_code:
        value: 0xF2
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  pchl:
    # Move HL to Program Counter (Jump to address in HL)
    byte_code:
        value: 0xE9
        size: 8

  # Stack Operations
  ret:
    # return unconditionally
    byte_code:
        value: 0xC9
        size: 8
  rz:
    # return if zero flag is set
    byte_code:
        value: 0xC8
        size: 8
  rnz:
    # return if zero flag not set
    byte_code:
        value: 0xC0
        size: 8
  rc:
    # return if carry flag is set
    byte_code:
        value: 0xD8
        size: 8
  rnc:
    # return if carry flag not set
    byte_code:
        value: 0xD0
        size: 8
  rpe:
    # return if parity is even (parity flag is one)
    byte_code:
        value: 0xE8
        size: 8
  rpo:
    # return if parity is odd (parity flag is zero)
    byte_code:
        value: 0xE0
        size: 8
  rm:
    # return if accumultor is negative (sign flag is one)
    byte_code:
        value: 0xF8
        size: 8
  rp:
    # return if accumultor is positive (sign flag is zero)
    byte_code:
        value: 0xF0
        size: 8
  call:
    # Call unconditionally
    byte_code:
        value: 0xCD
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  cz:
    # Call if zero
    byte_code:
        value: 0xCC
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  cnz:
    # Call if not zero
    byte_code:
        value: 0xC4
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  cc:
    # Call if carry
    byte_code:
        value: 0xDC
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  cnc:
    # Call if not carry
    byte_code:
        value: 0xD4
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  cpe:
    # Call if parity even (panty flag is set to one)
    byte_code:
        value: 0xEC
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  cpo:
    # Call if parity odd (panty flag is set to zero)
    byte_code:
        value: 0xE4
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  cm:
    # Call if accumulator is minus (sign flag is one)
    byte_code:
        value: 0xFC
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  cp:
    # Call if accumulator is positive (sign flag is zero)
    byte_code:
        value: 0xF4
        size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - uint16_no_bytecode
  rst:
    byte_code:
      value: 3
      size: 2
      suffix:
        value: 7
        size: 3
    operands:
      count: 1
      specific_operands:
        list:
          address_code:
            type: numeric_bytecode
            bytecode:
              max: 7
              min: 0
              byte_align: false
  push:
    variants:
      # Push a register pair to the stack
      # Bit format 00xx1011, xx = register pair
      - byte_code:
          value: 3
          size: 2
          suffix:
            value: 1
            size: 5
        operands:
          count: 1
          operand_sets:
            list:
              - register_pairs
            disallowed_pairs:
              - [sp_pair]
      # Push the Program Status Words (A + flags)
      - byte_code:
          value: 0xF5
          size: 8
        operands:
          count: 1
          specific_operands:
            list:
              program_status_word:
                type: register
                register: psw
  sphl:
    # Move HL to SP
    byte_code:
        value: 0xF9
        size: 8
  pop:
    variants:
      # Pop to a register pair except stack pointer SP
      # Bit format 00xx1011, xx = register pair
      - byte_code:
          byte_code:
              value: 3
              size: 2
              suffix:
                value: 1
                size: 4
          operands:
            count: 1
            operand_sets:
              list:
                - register_pairs
              disallowed_pairs:
                - [sp_pair]
      # Pop to Program Status Words (A + flags)
      - byte_code:
          byte_code:
              value: 0xF1
              size: 8
          operands:
            count: 1
            specific_operands:
              list:
                program_status_word:
                  type: register
                  register: psw
