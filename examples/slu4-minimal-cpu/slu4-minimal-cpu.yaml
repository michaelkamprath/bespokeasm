description: slu4 Minimal UART CPU
general:
  address_size: 16
  multi_word_endianness: little
  registers:
    - a
  origin: 0x8000
  identifier:
    name: slu4-mincpu-asm
    version: "1.5.1"
    extension: min-asm
  min_version: 0.5.0
operand_sets:
  immediate:
    operand_values:
      uint8:
        type: numeric
        argument:
          size: 8
          byte_align: true
  absolute_address:
    operand_values:
      a_address:
        type: numeric
        argument:
          size: 16
          byte_align: true
  relative_address:
    operand_values:
      r_address:
        type: numeric
        argument:
          size: 16
          byte_align: true
predefined:
  constants:
    - name: os_Start
      value: 0xf000
    - name: os_Prompt
      value: 0xf003
    - name: os_Print
      value: 0xf006
    - name: os_PrintHex
      value: 0xf009
    - name: os_WaitUART
      value: 0xf00c
    - name: os_LoadFile
      value: 0xf00f
    - name: os_SaveFile
      value: 0xf012
    - name: os_MemMove
      value: 0xf015
    - name: os_FindFile
      value: 0xf018
    - name: os_Mnemonics
      value: 0xf01b
    - name: os_HexToWord
      value: 0xf01f
    - name: os_CursorX
      value: 0xf022
    - name: os_CursorY
      value: 0xf025
    - name: os_Random
      value: 0xf028
    - name: os_XOR
      value: 0xf02b
    - name: os_MemAddr
      value: 0xfeb0
    - name: os_ParsePtr
      value: 0xfeb2
    - name: os_RandomX
      value: 0xfec2
    - name: os_RandomA
      value: 0xfec3
    - name: os_RandomB
      value: 0xfec4
    - name: os_RandomC
      value: 0xfec5
    - name: os_InpBuf
      value: 0xfec9
instructions:
  nop:
    bytecode:
      value: 0
      size: 8
  bnk:
    bytecode:
      value: 1
      size: 8
  out:
    bytecode:
      value: 2
      size: 8
  clc:
    bytecode:
      value: 3
      size: 8
  sec:
    bytecode:
      value: 4
      size: 8
  lsl:
    bytecode:
      value: 5
      size: 8
  rol:
    bytecode:
      value: 6
      size: 8
  lsr:
    bytecode:
      value: 7
      size: 8
  ror:
    bytecode:
      value: 8
      size: 8
  asr:
    bytecode:
      value: 9
      size: 8
  inp:
    bytecode:
      value: 10
      size: 8
  neg:
    bytecode:
      value: 11
      size: 8
  inc:
    bytecode:
      value: 12
      size: 8
  dec:
    bytecode:
      value: 13
      size: 8
  ldi:
    bytecode:
      value: 14
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - immediate
  adi:
    bytecode:
      value: 15
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - immediate
  sbi:
    bytecode:
      value: 16
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - immediate
  cpi:
    bytecode:
      value: 17
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - immediate
  aci:
    bytecode:
      value: 18
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - immediate
  sci:
    bytecode:
      value: 19
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - immediate
  jpa:
    bytecode:
      value: 20
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  lda:
    bytecode:
      value: 21
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  sta:
    bytecode:
      value: 22
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  ada:
    bytecode:
      value: 23
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  sba:
    bytecode:
      value: 24
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  cpa:
    bytecode:
      value: 25
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  aca:
    bytecode:
      value: 26
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  sca:
    bytecode:
      value: 27
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  jpr:
    bytecode:
      value: 28
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - relative_address
  ldr:
    bytecode:
      value: 29
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - relative_address
  str:
    bytecode:
      value: 30
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - relative_address
  adr:
    bytecode:
      value: 31
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - relative_address
  sbr:
    bytecode:
      value: 32
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - relative_address
  cpr:
    bytecode:
      value: 33
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - relative_address
  acr:
    bytecode:
      value: 34
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - relative_address
  scr:
    bytecode:
      value: 35
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - relative_address
  clb:
    bytecode:
      value: 36
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  neb:
    bytecode:
      value: 37
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  inb:
    bytecode:
      value: 38
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  deb:
    bytecode:
      value: 39
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  adb:
    bytecode:
      value: 40
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  sbb:
    bytecode:
      value: 41
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  acb:
    bytecode:
      value: 42
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  scb:
    bytecode:
      value: 43
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  clw:
    bytecode:
      value: 44
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  new:
    bytecode:
      value: 45
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  inw:
    bytecode:
      value: 46
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  dew:
    bytecode:
      value: 47
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  adw:
    bytecode:
      value: 48
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  sbw:
    bytecode:
      value: 49
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  acw:
    bytecode:
      value: 50
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  scw:
    bytecode:
      value: 51
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  lds:
    bytecode:
      value: 52
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - immediate
  sts:
    bytecode:
      value: 53
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - immediate
  phs:
    bytecode:
      value: 54
      size: 8
  pls:
    bytecode:
      value: 55
      size: 8
  jps:
    bytecode:
      value: 56
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  rts:
    bytecode:
      value: 57
      size: 8
  bne:
    bytecode:
      value: 58
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  beq:
    bytecode:
      value: 59
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  bcc:
    bytecode:
      value: 60
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  bcs:
    bytecode:
      value: 61
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  bpl:
    bytecode:
      value: 62
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
  bmi:
    bytecode:
      value: 63
      size: 8
    operands:
      count: 1
      operand_sets:
        list:
          - absolute_address
macros:
  # All Push macros push LSB first to keep with Minimal CPU OS calling convention.
  # This means multibyte numbers will be in big endian arrangement on the stack.
  # RAM values are little endian.
  pushi:
    - operands:
        count: 1
        operand_sets:
          list:
            - immediate
      instructions:
        - "ldi @ARG(0)"
        - "phs"
  pusha:
    - operands:
        count: 1
        operand_sets:
          list:
            - absolute_address
      instructions:
        - "lda @ARG(0)"
        - "phs"
  pushr:
    - operands:
        count: 1
        operand_sets:
          list:
            - relative_address
      instructions:
        - "ldr @ARG(0)"
        - "phs"
  pushs:
    - operands:
        count: 1
        operand_sets:
          list:
            - immediate
      instructions:
        - "lds @ARG(0)+(0+1)"
        - "phs"
  push2s:
    - operands:
        count: 1
        operand_sets:
          list:
            - immediate
      instructions:
        # value on stack is big endian, start with LSB
        - "lds @ARG(0)+(1+0)"
        - "phs"
        - "lds @ARG(0)+(0+1)"
        - "phs"
  push2i:
    - operands:
        count: 1
        specific_operands:
          immediate:
            list:
              uint16:
                type: numeric
                argument:
                  size: 16
                  byte_align: true
      instructions:
        - "ldi BYTE0(@ARG(0))"
        - "phs"
        - "ldi BYTE1(@ARG(0))"
        - "phs"
  push2a:
    - operands:
        count: 1
        operand_sets:
          list:
            - absolute_address
      instructions:
        # value in memory is little endian, start with LSB
        - "lda @ARG(0)+0"
        - "phs"
        - "lda @ARG(0)+1"
        - "phs"
  push4i:
    - operands:
        count: 1
        specific_operands:
          immediate:
            list:
              uint32:
                type: numeric
                argument:
                  size: 32
                  byte_align: true
      instructions:
        - "ldi BYTE0(@ARG(0))"
        - "phs"
        - "ldi BYTE1(@ARG(0))"
        - "phs"
        - "ldi BYTE2(@ARG(0))"
        - "phs"
        - "ldi BYTE3(@ARG(0))"
        - "phs"
  push4a:
    - operands:
        count: 1
        operand_sets:
          list:
            - absolute_address
      instructions:
        # value in memory is little endian, start with LSB
        - "lda @ARG(0)+0"
        - "phs"
        - "lda @ARG(0)+1"
        - "phs"
        - "lda @ARG(0)+2"
        - "phs"
        - "lda @ARG(0)+3"
        - "phs"
  push4s:
    - operands:
        count: 1
        operand_sets:
          list:
            - immediate
      instructions:
        # value on stack is big endian, start with LSB
        - "lds @ARG(0)+(3+0)"
        - "phs"
        - "lds @ARG(0)+(2+1)"
        - "phs"
        - "lds @ARG(0)+(1+2)"
        - "phs"
        - "lds @ARG(0)+(0+3)"
        - "phs"
  pull2:
    - instructions:
        - "pls"
        - "pls"
  pull4:
    - instructions:
        - "pls"
        - "pls"
        - "pls"
        - "pls"
  cpy2as:
    - operands:
        count: 2
        operand_sets:
          list:
            - absolute_address
            - immediate
      instructions:
        # stack is big endian, memory is little endian
        - "lds @ARG(1)+1"
        - "sta @ARG(0)+0"
        - "lds @ARG(1)+0"
        - "sta @ARG(0)+1"
  cpy2sa:
    - operands:
        count: 2
        operand_sets:
          list:
            - immediate
            - absolute_address
      instructions:
        # stack is big endian, memory is little endian
        - "lda @ARG(1)+0"
        - "sts @ARG(0)+1"
        - "lda @ARG(1)+1"
        - "sts @ARG(0)+0"
  cpy4as:
    - operands:
        count: 2
        operand_sets:
          list:
            - absolute_address
            - immediate
      instructions:
        # stack is big endian, memory is little endian
        - "lds @ARG(1)+3"
        - "sta @ARG(0)+0"
        - "lds @ARG(1)+2"
        - "sta @ARG(0)+1"
        - "lds @ARG(1)+1"
        - "sta @ARG(0)+2"
        - "lds @ARG(1)+0"
        - "sta @ARG(0)+3"
  cpy4ai:
    - operands:
        count: 2
        operand_sets:
          list:
            - absolute_address
            - immediate
      instructions:
        # Copies in little endian order
        - "ldi BYTE0(@ARG(1))"
        - "sta @ARG(0)+0"
        - "ldi BYTE1(@ARG(1))"
        - "sta @ARG(0)+1"
        - "ldi BYTE2(@ARG(1))"
        - "sta @ARG(0)+2"
        - "ldi BYTE3(@ARG(1))"
        - "sta @ARG(0)+3"
  cpy4sa:
    - operands:
        count: 2
        operand_sets:
          list:
            - immediate
            - absolute_address
      instructions:
        # stack is big endian, memory is little endian
        - "lda @ARG(1)+0"
        - "sts @ARG(0)+3"
        - "lda @ARG(1)+1"
        - "sts @ARG(0)+2"
        - "lda @ARG(1)+2"
        - "sts @ARG(0)+1"
        - "lda @ARG(1)+3"
        - "sts @ARG(0)+0"
  cpy4si:
    - operands:
        count: 2
        operand_sets:
          list:
            - immediate
            - immediate
      instructions:
        - "ldi BYTE0(@ARG(1))"
        - "sts @ARG(0)+0"
        - "ldi BYTE1(@ARG(1))"
        - "sts @ARG(0)+1"
        - "ldi BYTE2(@ARG(1))"
        - "sts @ARG(0)+2"
        - "ldi BYTE3(@ARG(1))"
        - "sts @ARG(0)+3"
  cpy4ss:
    - operands:
        count: 2
        operand_sets:
          list:
            - immediate
            - immediate
      instructions:
        - "lds @ARG(1)+0"
        - "sts @ARG(0)+0"
        - "lds @ARG(1)+1"
        - "sts @ARG(0)+1"
        - "lds @ARG(1)+2"
        - "sts @ARG(0)+2"
        - "lds @ARG(1)+3"
        - "sts @ARG(0)+3"
