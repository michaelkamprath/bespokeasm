{
    "scopeName": "source.asm",
    "patterns": [{ "include": "#main" }],
    "repository": {
        "main": {
            "patterns": [
                { "include": "#instructions" },
                { "include": "#registers" },
                { "include": "#compiler_labels" },
                { "include": "#labels" },
                { "include": "#constants" },
                { "include": "#comments" },
                { "include": "#numeric-values" },
                { "include": "#operators" },
                { "include": "#expressions" },
                { "include": "#deferred-addressing"},
                { "include": "#indirect-addressing"},
                { "include": "#directives" },
                { "include": "#strings" }
            ]
        },
        "instructions": {
            "name": "meta.function",
            "patterns": [
                { "include": "#registers" },
                { "include": "#compiler_labels" },
                { "include": "#numeric-values" },
                { "include": "#operators" },
                { "include": "#expressions" },
                { "include": "#deferred-addressing"},
                { "include": "#indirect-addressing" },
                { "include": "#operands_variables" },
                {
                    "name": "punctuation.separator",
                    "match": "\\,"
                }
            ],
            "begin": "(?i)(##INSTRUCTIONS##)",
            "end": "(?i)(?=(?:\\s*\\;|\\s*$|##INSTRUCTIONS##))",
            "beginCaptures": {
                "0": { "name": "variable.function.instruction" }
            }
        },
        "operands_variables": {
            "name": "variable.parameter.instruction",
            "match": "(?<!\\w)((?:\\.|_|\\w){1}[\\w\\d_]*)\\b"
        },
        "registers": {
            "name": "variable.language.register",
            "match": "(?:##REGISTERS##)"
        },
        "compiler_labels": {
            "name": "constant.language",
            "match": "\\b(?:##COMPILERCONSTANTS##)\\b"
        },
        "labels": {
            "match": "((?:\\.|_|\\w){1}[\\w\\d_]*)(\\:)",
            "captures": {
                "1": { "name": "variable.other.label" },
                "2": { "name": "punctuation.definition.variable.colon.label" }
            }
        },
        "constants": {
            "name": "variable.other.constant",
            "match": "^\\s*(\\w*)(?:\\s*)?(?=\\=)"
        },
        "comments": {
            "name": "comment.line.semicolon",
            "begin": "\\;",
            "end": "\\n"
        },
        "numeric-values": {
            "patterns": [
                {
                    "name": "constant.numeric.integer.hexadecimal",
                    "match": "(?<!\\w)(?:\\$[0-9a-fA-F]+|0x[0-9a-fA-F]+)\\b"
                },
                {
                    "name": "constant.numeric.integer.binary",
                    "match": "(?<!\\w)(?:(?:b|%)[01]+)\\b"
                },
                {
                    "name": "constant.numeric.integer.decimal",
                    "match": "(?<!\\w)(?:\\d+)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic",
                    "match": "[\\+\\-\\*\\/]{1}"
                },
                {
                    "name": "keyword.operator.logical",
                    "match": "[\\&\\|\\^]{1}"
                },
                {
                    "name": "keyword.operator.bitwise",
                    "match": "(?:<<|>>)"
                },
                {
                    "name": "keyword.operator.word",
                    "match": "\\b(?:##EXPRESSION_FUNCTIONS##)\\b"
                }
            ]
        },
        "expressions": {
            "name": "meta.parens",
             "patterns": [
                { "include": "#numeric-values" },
                { "include": "#compiler_labels" },
                { "include": "#operands_variables" },
                { "include": "#operators" }
            ],
            "begin": "\\(",
            "end": "\\)",
            "beginCaptures": {
                "0": { "name": "punctuation.section.parens.begin" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.section.parens.end" }
            },
            "contentName": "expression.group"
        },
        "indirect-addressing": {
            "name": "meta.brackets",
            "patterns": [
                { "include": "#registers" },
                { "include": "#compiler_labels" },
                { "include": "#numeric-values" },
                { "include": "#expressions" },
                { "include": "#deferred-addressing" },
                { "include": "#indirect-addressing" },
                { "include": "#operators" },
                { "include": "#operands_variables" }
            ],
            "begin": "(?<!\\[)(\\[{1})(?!\\[)",
            "end": "([\\]]{1})",
            "beginCaptures": {
                "0": { "name": "punctuation.section.brackets.begin" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.section.brackets.end" }
            },
            "contentName": "expression.indirect_addressing"
        },
        "deferred-addressing": {
            "name": "meta.double_brackets",
            "patterns": [
                { "include": "#registers" },
                { "include": "#compiler_labels" },
                { "include": "#numeric-values" },
                { "include": "#expressions" },
                { "include": "#deferred-addressing" },
                { "include": "#indirect-addressing" },
                { "include": "#operators" },
                { "include": "#operands_variables" }
            ],
            "begin": "(?<!\\[)([\\[]{2})\\b",
            "end": "([\\]]{2})",
            "beginCaptures": {
                "0": { "name": "punctuation.section.double_brackets.begin" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.section.double_brackets.end" }
            },
            "contentName": "expression.deferred_addressing"
        },
        "directives": {
            "patterns": [
                {
                    "name": "keyword.other.directive",
                    "match": "(?<!\\w)(?:##DIRECTIVES##)\\b"
                },
                {
                    "name": "storage.type",
                    "match": "(?<!\\w)(?:##DATATYPES##)\\b"
                },
                {
                    "begin": "^(\\#)",
                    "beginCaptures": {
                        "1": { "name": "punctuation.definition.preprocessor" }
                    },
                    "end": "(?=(?:\\s*\\;|\\s*$))",
                    "name": "meta.preprocessor",
                    "patterns": [
                        {
                            "name": "keyword.control.preprocessor",
                            "match": "(?<=\\#)(?:##PREPROCESSOR##)"
                        },
                        { "include": "#strings" }
                    ]
                }
            ]
        },
        "strings": {
            "name": "meta.string",
            "begin": "(\\\"|\\')",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.string.begin" }
            },
            "end": "(?<!\\\\)\\1",
            "endCaptures": {
                "0": { "name": "punctuation.definition.string.end" }
            },
            "contentName": "string.quoted",
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "match": "\\\\(?:[\\\\\\'\\\"abfnrtv]|o[0-8]{2}|x[\\da-fA-F]{2})"
                }
            ]
        }
    }
}