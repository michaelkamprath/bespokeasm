import unittest
import yaml

from bespokeasm.assembler.line_identifier import LineIdentifier
from bespokeasm.assembler.byte_code.assembled import AssembledInstruction
from bespokeasm.assembler.byte_code.parts import NumericByteCodePart, ExpressionByteCodePart, CompositeByteCodePart
from bespokeasm.assembler.label_scope import GlobalLabelScope

class TestBytecodeObjects(unittest.TestCase):

    def test_bytecode_assembly(self):
        test_line_id = LineIdentifier(42, 'test_bytecode_assembly')
        parts1 = [
            NumericByteCodePart(15, 4, True, 'big', test_line_id),
            NumericByteCodePart(3, 2, False, 'big', test_line_id),
            NumericByteCodePart(3, 2, False, 'big', test_line_id),
        ]

        ai1 = AssembledInstruction(123, parts1)
        self.assertEqual(ai1.byte_size, 1)
        self.assertEqual(ai1.get_bytes({}, 0x8000, 1), bytearray([0xff]), 'generated bytes should match')

        parts2 = [
            NumericByteCodePart(8, 4, True, 'big', test_line_id),
            NumericByteCodePart(0x1122, 16, True, 'little', test_line_id),
            NumericByteCodePart(0x11223344, 32, True, 'little', test_line_id),
            NumericByteCodePart(0x8, 4, False, 'big', test_line_id),
        ]

        ai2 = AssembledInstruction(456, parts2)
        self.assertEqual(ai2.byte_size, 8)
        self.assertEqual(ai2.get_bytes({}, 0x8000, 8), bytearray([0x80, 0x22, 0x11, 0x44, 0x33, 0x22, 0x11, 0x80]), 'generated bytes should match')

    def test_composite_bytecode_part(self):
        test_line_id = LineIdentifier(88, 'test_composite_bytecode_part')
        register_labels = set(['a','i'])
        label_values = GlobalLabelScope(register_labels)
        label_values.set_label_value('var1', 2, 1)
        label_values.set_label_value('var2', 0xF0, 2)

        p1 = NumericByteCodePart(1, 3, True, 'big', test_line_id)
        p2 = NumericByteCodePart(3, 2, True, 'big', test_line_id)
        p3 = ExpressionByteCodePart('var1+13',4,True,'big',test_line_id)

        c1 = CompositeByteCodePart([p1,p2], False, 'big', test_line_id)
        self.assertEqual(5, c1.value_size, 'bit size should match')
        self.assertEqual(7, c1.get_value(label_values, 0x8000, 5), 'value should match')

        c2 = CompositeByteCodePart([p2,p1], False, 'big', test_line_id)
        self.assertEqual(5, c2.value_size, 'bit size should match')
        self.assertEqual(25, c2.get_value(label_values, 0x8000, 5), 'value should match')

        c3 = CompositeByteCodePart([p1,p2,p3], False, 'big', test_line_id)
        self.assertEqual(9, c3.value_size, 'bit size should match')
        self.assertEqual(127, c3.get_value(label_values, 0x8000, 9), 'value should match')

        c4 = CompositeByteCodePart([p1,p2,p1], False, 'big', test_line_id)
        self.assertEqual(8, c4.value_size, 'bit size should match')
        self.assertEqual(57, c4.get_value(label_values, 0x8000, 8), 'value should match')