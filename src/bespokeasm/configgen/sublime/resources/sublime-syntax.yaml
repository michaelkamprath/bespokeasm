%YAML 1.2
---
file_extensions:
  - ##FILEEXTENSION##
scope: source.bespokeasm
verson: 2

contexts:
  main:
    - include: directives
    - include: instructions
    - include: numbers
    - include: strings
    - include: compiler_labels
    - match: ^\s*(\w*)(?:\s*)?(\=|EQU)
      captures:
        1: variable.other.constant
        2: keyword.operator.assignment
    - match: ((?:\.|_|\w){1}[\w\d_]*)(\:)
      captures:
        1: variable.other.label
        2: punctuation.definition.variable.colon.label
    - match: \;
      scope: punctuation.definition.comment
      push: line_comment
    - include: numerical_expressions

  instructions:
    - match: (?i)(?:##INSTRUCTIONS##)
      scope: variable.function.instruction
      push:
        - meta_scope: meta.function
        - include: pop_instruction_end
        - include: registers
        - include: compiler_labels
        - include: indirect_addressing
        - include: deferred_addressing
        - include: numerical_expressions
        - include: operands_variables
        - match: \,
          scope: punctuation.separator
    - match: (?i)(?:##MACROS##)
      scope: variable.function.macro
      push:
        - meta_scope: meta.function
        - include: pop_instruction_end
        - include: registers
        - include: compiler_labels
        - include: indirect_addressing
        - include: deferred_addressing
        - include: numerical_expressions
        - include: operands_variables
        - match: \,
          scope: punctuation.separator

  operands_variables:
    - match: (?<!\w)((?:\.|_|\w){1}[\w\d_]*)\b
      scope: variable.parameter.instruction

  registers:
    - match: (?i)(?:##REGISTERS##)
      scope: variable.language.register

  compiler_labels:
    - match: (?<!\w)(?:##COMPILERCONSTANTS##)\b
      scope: constant.language

  strings:
    - match: "(\"|')"
      scope: punctuation.definition.string.begin
      push:
        - meta_scope: string.quoted
        - match: \\(?:[\\\'\"abfnrtv]|o[0-8]{2}|x[\da-fA-F]{2})
          scope: constant.character.escape
        - match: \1
          scope: punctuation.definition.string.end
          pop: true

  numbers:
    - match: (?<!\w)(?:\$[0-9a-fA-F]+|0x[0-9a-fA-F]+|[0-9a-fA-F]+H)\b
      scope: constant.numeric.integer.hexadecimal
    - match: (?<!\w)(?:(?:b|%)[01]+)\b
      scope: constant.numeric.integer.binary
    - match: (?<!\w)(?:\d+)\b
      scope: constant.numeric.integer.decimal

  numerical_expressions:
    - include: numbers
    - include: registers
    - include: compiler_labels
    - match: "[\\+\\-\\*\\/]{1}"
      scope: keyword.operator.arithmetic
    - match: "[\\&\\|\\^]{1}"
      scope: keyword.operator.logical
    - match: (?:>>|<<)
      scope: keyword.operator.bitwise
    - match: \b(?:##EXPRESSION_FUNCTIONS##)\b
      scope: keyword.operator.word
    - include: operands_variables
    - match: \(
      scope: punctuation.section.parens.begin
      push:
        - meta_scope: expression.group
        - include: numerical_expressions
        - match: \)
          scope: punctuation.section.parens.end
          pop: true

  indirect_addressing:
    - match: (?<!\[)\[(?!\[)
      scope: punctuation.section.brackets.begin
      push:
        - meta_scope: expression.indirect_addressing
        - include: indirect_addressing
        - include: deferred_addressing
        - include: registers
        - include: compiler_labels
        - include: numerical_expressions
        - include: operands_variables
        - match: \]
          scope: punctuation.section.brackets.end
          pop: true

  deferred_addressing:
    - match: (?<!\[)([\[]{2})\b
      scope: punctuation.section.double_brackets.begin
      push:
        - meta_scope: expression.deferred_addressing
        - include: indirect_addressing
        - include: deferred_addressing
        - include: registers
        - include: compiler_labels
        - include: numerical_expressions
        - include: operands_variables
        - match: '[\]]{2}'
          scope: punctuation.section.double_brackets.end
          pop: true

  line_comment:
      - meta_scope: comment.line.semicolon
      - match: $
        pop: true

  compiler_directives:
    - match: (?<!\w)(?:##DIRECTIVES##)\b
      scope: keyword.other.directive
      push:
        - meta_scope: meta.directive
        - include: pop_instruction_end
        - include: strings
        - include: numerical_expressions
        - match: (?=(?:\s*\;|\s*$))
          pop: true

  data_types_directives:
    - match: (?<!\w)(?:##DATATYPES##)\b
      scope: storage.type
      push:
        - meta_scope: meta.directive
        - include: pop_instruction_end
        - include: strings
        - include: numerical_expressions
        - match: (?=(?:\s*\;|\s*$))
          pop: true

  preprocessor_directives:
    - match: '^\#'
      scope: punctuation.definition.preprocessor
      push:
        - meta_scope: meta.preprocessor
        - match: (?<=\#)(?:##PREPROCESSOR##)
          scope: keyword.control.preprocessor
        - include: strings
        - include: numerical_expressions
        - match: (?=(?:\s*\;|\s*$))
          pop: true

  directives:
    - include: compiler_directives
    - include: data_types_directives
    - include: preprocessor_directives


  pop_instruction_end:
    - match: (?i)(?=(?:\s*\;|\s*$|##INSTRUCTIONS##))
      pop: true
      name: instructions
    - match: (?=(?:\.|_|\w){1}[\w\d_]*:)
      pop: true
      name: label
